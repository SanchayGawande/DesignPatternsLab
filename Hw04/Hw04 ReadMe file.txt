This example demonstrates a simple ATM (Automated Teller Machine) state machine implemented in Java. The state machine models the behavior of an ATM, allowing for card insertion, PIN entry, cash withdrawal, and state transitions. It provides a clear illustration of how a finite state machine can be used to manage the various states and transitions in an ATM system.State Transitions:Insert a card to transition from "No Card" to "Card Inserted" state.Enter the correct PIN to transition from "Card Inserted" to "PIN Entered" state.Entering an incorrect PIN will lead to the ATM blocking the card after three attempts, returning to the "No Card" state.Ejecting the card at any time returns the ATM to the "No Card" state.Classes:ATMContext: This class represents the main ATM context and manages state transitions. It contains methods for inserting a card, ejecting a card, entering a PIN, and withdrawing cash. The class also tracks the current state and manages the ATM's balance and PIN entry attempts.ATMState (Interface): An interface defining the behaviors that each state in the ATM state machine should implement. It includes methods for inserting a card, ejecting a card, entering a PIN, and withdrawing cash.NoCardState: A state class representing the initial state when no card is inserted. It responds to actions such as inserting a card.CardInsertedState: A state class representing the state after a card is inserted. It responds to actions such as entering a PIN.PinEnteredState: A state class representing the state after a correct PIN is entered. It responds to actions such as withdrawing cash.The example showcases the use of the Singleton pattern to ensure there is only one instance of each state class, enabling proper state management and transitions within the ATM state machine.